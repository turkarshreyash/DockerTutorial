* Docker: Comprehensive package.
- Pack our application and run on any machine.
- Container: Isolated enviornment.
- Remove the pack/application once used.
- Many tools use different version.
- Build, run and ship.
$ docker-compose up
$ docker-compose down --rmi all


* Container vs VM.
- VM are hardware abstractions.
- VM have an OS running.
- VM require hypervisor (Very familiar territory :D ).
- Resource intensive.
- Resource have to be divided.

- Containers give us isolation.
- Containers are lightweight.
- Multiple Container can run on OS.


* Docker Architecture
- Client - Server using REST API
- Container is just a process.
- Container share a kernel of OS.
- On Windows we can run Windows and Linux container.
- On linux we can run on linux container.
- No mac os support a light wieght linux machine runs on top for support.


* Installation.


* Development workflow.
- Take a application and dockerize it.
- Add a docker file.
- Docker file includes instructions to package application into a image.
- Image:
    - cut down Os.
    - runtine env (node/python)
    - application files.
    - third party libs.
    - env variables.
- Image we use to run a container.
- Container has it's own file system.
$ docker run
- Docker registery is like github is to git.
- We can deploy this container on any node.


* Lab
- To an existing app add 'Dockerfile'
- FROM instruction is used to import OS and env.
- COPY is used to include app files.
- CMD is used to run the app.
- Docker build give a tg to identitfy. -t
- To see all images on this machine: docker images or docker image ls.
- We can push this to Docker registry.
- To run docker run <REPOSITORY>


* Ubuntu.
- Instead of running docker pull Ubuntu. Do docker run ubuntu.
- This will run a container but in non-iteractive way.
- To run a container in interactive way run docker run -it ubuntu,
- Some usefull commands:
    - history,
    - !2 (I already knew !!, !2, !-4 was new for me.)


* Ubuntu packager manager (Kinda revision.)
- apt: Advanced package mananger.
- apt-get: Older.
- apt install nano.
- apt update: Updates database.
- Use apt list to get all packages.
- apt remove nano.


* Linux (revision.)
- Everything is a file.
- /etc: editable text configurations.
- /var: variable.
- cat read and output. Can redirect to a file cat file1.txt > file2.txt


* Docker Compose.
- To remove images, docker image rm 123 343
- Use docker image -q to get just the image ids.
- docker container ls -aq.
- Docker compose is used for multi container application.
- docker-compose up
- docker-compose.yml


* JSON and YAML (Revision.)
- --- to indicate begining of the YAMl.
- We don't have to use quotes for YAMl.
- List or array is represented by - on different line at indentation.
- YAML parsing is slower than Json.


* Compose file.
- docker-compose.yml: Default name.
    - version: "3.8", Version compatible with docker engine.
    - services:
        frontend: 
        backend: 
        db:
- These above service names are arbittary.
- Example:
    - services:
        frontend:
            build: ./frontend (directory.)
            ports:
                - 3000:3000 (host: container mapping.)
            enviornment:
                - DB_URL=mongodb://db(hostname)/vidly
                DB_URL: mongodb://db(hostname)/vidly (Another way to do it.)
        api:
            build: ./bakcend
            ports:
                - 3001:3001
        db:
            image: mongo:4.0-xenial (We don't want to run from dir but from image.)
            ports:
                -27017:27017
            volumes: (Since we don't want it to store to temp vol of container.)
                - vidly:/data/db (Outside the container.)

        volumes:
          vidly:

- There are many properties listed on website.


* Buildind images:
- docker compose is build on top of docker engine.
- docker-compose: will impact multiple applications.
- --no-cache: to avoid weird issues.
- --pull: to pull newer version of images.


* Docker networking.
- Docker compose will create a network.
- docker network ls
- bridge, host and none.
- Containers on same network can talk to each other using their name.
- docker ps and get running containers.
- docker exec -it -u root 8c6 (container-id) sh
- -u root for root user.
- ping api (another container).
- Docker comes with DNS server DNS resolver runs on each container.
- api (application name) is resolved to IP address.
- This resolution is onlhy available internal to container.
- 27017: 27017 (host to container mapping.)
